# importing the necessary dependencies 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston

#understanding the data set
boston = load_boston()
print(boston.DESCR)

#accesing the data attributes
dataset = boston.data
for name, index in enumerate(boston.feature_names):
    print(index,name)
    
np.shape(dataset)

#reshaping data
data = dataset[ : , 12].reshape(-1,1)
np.shape(dataset)

#shape of target
target = boston.target.reshape(-1,1)
np.shape(target)

%matplotlib inline
plt.scatter(data, target, color='green')
plt.xlabel("lower income population")
plt.ylabel("cost of house")
plt.show()

from sklearn.linear_model import LinearRegression

#creating model
reg = LinearRegression()

#fitting the model
reg.fit(data, target)

#prediction
pred = reg.predict(data)

%matplotlib inline
plt.scatter(data, target, color='green')
plt.plot(data, pred, color='red')
plt.xlabel("lower income population")
plt.ylabel("cost of house")
plt.show()

#circumventing curve using polynomial model
from sklearn.preprocessing import PolynomialFeatures

#to allow merging of module
from sklearn.pipeline import make_pipeline

model_1 = make_pipeline(PolynomialFeatures(3), reg)

model_1.fit(data, target)

pred = model_1.predict(data)

%matplotlib inline
plt.scatter(data, target, color='green')
plt.plot(data, pred, color='red')
plt.xlabel("lower income population")
plt.ylabel("cost of house")
plt.show()

# r square matrix to judge the performance model
from sklearn.metrics import r2_score

#predicting
r2_score(pred,target)


















